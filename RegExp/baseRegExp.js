// 1.元字符
let str="zhangqighao_410526@113102  henan";

// 匹配除换行符以外的所有字符
// var reg=/./
// 匹配数字
// var reg=/\d/
/*匹配字母数字下划线或者汉字\w*/
// var reg = /\w/
/*匹配任意空白的字符\s*/
// var reg=/\s/;
/*匹配单词开始或结束的位置*/
// var reg=/\b/;
/*匹配行首\^*/
// var reg=/^z/
/*匹配行尾*/
// var reg=/n$/
/*\D匹配非数字的任意字符*/
/*\W与\w意思相反*/
/*\S与\s意思相反*/
/*\B与\b意思相反*/
/*[^x]此处的^表示取反的意思*/


/*重复限定符，限定符共有6个，假设重复为x次，那么规则如下*/
/*
*表示x>=0
+表示x>=1
?表示x=0或者x=1
{n}表示x=n；
{n,}  x>=n
{n,m}  n<=x=m
 */


/*字符组
[…] 匹配中括号内字符之一. 如: [xyz] 匹配字符 x, y 或 z. 如果中括号中包含元字符, 则元字符降级为普通字符, 不再具有元字符的功能, 如 [+.?] 匹配 加号, 点号或问号.
*/
/*排除性字符组
[^…] 匹配任何未列出的字符,. 如: [^x] 匹配除x以外的任意字符.
*/
/*多选解构：就是或|的意思*/
/*括号  
括号 常用来界定重复限定符的范围, 以及将字符分组. 如: (ab)+ 可以匹配abab..等, 其中 ab 便是一个分组.*/

/*
转义字符
\ 即转义字符, 通常 \ * + ? | { [ ( ) ] }^ $ . # 和 空白 这些字符都需要转义.

操作符的运算优先级
1. \ 转义符
2. (), (?:), (?=), [] 圆括号或方括号
3. *, +, ?, {n}, {n,}, {n,m} 限定符
4. ^, $ 位置
5. | “或” 操作
*/
/*匹配手机号*/
var str=/(\+86)?1\d{10}/;

/*修饰符：javaScript中正则表达式默认有如下五种修饰符:*/
/*
g (全文查找), 如上述截图, 实际上就开启了全文查找模式.
i (忽略大小写查找)
m (多行查找)
y (ES6新增的粘连修饰符)
u (ES6新增)
 */


/*
贪婪模式与非贪婪模式
默认情况下, 所有的限定词都是贪婪模式, 表示尽可能多的去捕获字符; 而在限定词后增加?, 则是非贪婪模式, 表示尽可能少的去捕获字符.
 */

var str = "aaab",
    reg1 = /a+/, //贪婪模式
    reg2 = /a+?/;//非贪婪模式
console.log(str.match(reg1)); //["aaa"], 由于是贪婪模式, 捕获了所有的a
console.log(str.match(reg2)); //["a"], 由于是非贪婪模式, 只捕获到第一个a

/*区间量词的非贪婪模式
一般情况下, 非贪婪模式, 我们使用的是”*?”, 或 “+?” 这种形式, 还有一种是 “{n,m}?”.
区间量词”{n,m}” 也是匹配优先, 虽有匹配次数上限, 但是在到达上限之前, 它依然是尽可能多的匹配, 而”{n,m}?” 则表示在区间范围内, 尽可能少的匹配.*/

/*分组：正则的分组主要通过小括号来实现, 括号包裹的子表达式作为一个分组, 括号后可以紧跟限定词表示重复次数.*/
/*分组可分为捕获性分组和非捕获性分组*/
/*捕获性分组, 通常由一对小括号加上子表达式组成. 捕获性分组会创建反向引用, 每个反向引用都由一个编号或名称来标识, js中主要是通过 $+编号 或者 \+编号 表示法进行引用. 如下便是一个捕获性分组的例子.*/
var color = "#808080";
var output = color.replace(/#(\d+)/,"$1"+"~~");//自然也可以写成 "$1~~"
console.log(RegExp.$1);//808080
console.log(output);//808080~~
/*以上, (\d+) 表示一个捕获性分组, RegExp.$1 指向该分组捕获的内容. $+编号 这种引用通常在正则表达式之外使用. \+编号 这种引用却可以在正则表达式中使用, 可用于匹配不同位置相同部分的子串.*/





/*非捕获性分组*/
/*非捕获性分组, 通常由一对括号加上”?:”加上子表达式组成, 非捕获性分组不会创建反向引用, 就好像没有括号一样. 如下:*/
var color = "#808080";
var output = color.replace(/#(?:\d+)/,"$1"+"~~");
console.log(RegExp.$1);//""
console.log(output);//$1~~